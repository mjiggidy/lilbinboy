name: Build and Publish Binaries

on:
  workflow_dispatch:
    inputs:
      version_number:
        required: true
        default: "0.0.1"
        description: "Version number for this release"
        type: string

jobs:
  build-windows-x64:
    runs-on: "windows-latest"

    permissions:
      contents: write

    steps:

      - name: Gettin' Started
        run: |
          echo "currently running ${{ runner.os }} ${{ runner.arch }}"
          echo "github ref is currently ${{ github.ref }}"
          echo "inputs.version_number is currently ${{ inputs.version_number }}"

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Installing lilbinboy itself, for dependencies and to bake in version info from setuptools-scm
      - name: Install Dependencies
        run: |
          pip install .

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          product-version: ${{ inputs.version_number }}
          file-version: ${{ inputs.version_number }}
          macos-app-version: ${{ inputs.version_number }}
          output-dir: build
          script-name: main.py
          mode: app
      
      - name: Build Installer
        uses: Minionguyjpro/Inno-Setup-Action@v1.2.5
        with:
          path: build_tools/win_create_installer.iss
          options: /F"lilbinboy_windows_${{ inputs.version_number }}_x86-64"


      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ inputs.version_number }}"
          files: |
            dist/*



  build-macos-arm:
    runs-on: "macos-latest"

    permissions:
      contents: write

    steps:

      - name: Gettin' Started
        run: |
          echo "currently running ${{ runner.os }} ${{ runner.arch }}"
          echo "github ref is currently ${{ github.ref }}"
          echo "inputs.version_number is currently ${{ inputs.version_number }}"

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Installing lilbinboy itself, for dependencies and to bake in version info from setuptools-scm
      - name: Install Dependencies
        run: |
          pip install .

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          product-version: ${{ inputs.version_number }}
          file-version: ${{ inputs.version_number }}
          macos-app-version: ${{ inputs.version_number }}
          output-dir: build
          script-name: main.py
          mode: app
      
      - name: Package to DMG
        run: |
          bash build_tools/mac_create_dmg.sh "${{ runner.arch }}" "${{ inputs.version_number }}"

      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ inputs.version_number }}"
          files: |
            dist/*



  build-macos-intel:
    runs-on: "macos-latest"

    permissions:
      contents: write

    steps:

      - name: Gettin' Started
        run: |
          echo "currently running ${{ runner.os }} ${{ runner.arch }} (x64 emulation)"
          echo "github ref is currently ${{ github.ref }}"
          echo "inputs.version_number is currently ${{ inputs.version_number }}"

      - name: Check-out repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: x64

      # Installing lilbinboy itself, for dependencies and to bake in version info from setuptools-scm
      - name: Install Dependencies
        run: |
          arch -x86_64 pip install .

      - name: Build Executable
        uses: Nuitka/Nuitka-Action@main
        with:
          nuitka-version: main
          product-version: ${{ inputs.version_number }}
          file-version: ${{ inputs.version_number }}
          macos-app-version: ${{ inputs.version_number }}
          macos-target-arch: x86_64
          output-dir: build
          script-name: main.py
          mode: app
      
      - name: Package to DMG
        run: |
          bash build_tools/mac_create_dmg.sh "x86-64" "${{ inputs.version_number }}"

      - name: GH Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ inputs.version_number }}"
          files: |
            dist/*