name: Build and Publish Binaries

on:
  push:
    tags:
      - 'v*'
    branches:
      - main

jobs:
  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install .

      - name: Build Binary (Linux and Windows)
        if: ${{ matrix.os != 'macos-latest' }}
        run: |
          pyside6-deploy --force main.py

      - name: Build Binary (macOS Intel)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          arch -x86_64 pyside6-deploy --force main.py
          mv dist dist_intel

      - name: Build Binary (macOS ARM)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          arch -arm64 pyside6-deploy --force main.py
          mv dist dist_arm

      - name: Combine macOS Binaries (manual step required for Universal Binary)
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          mkdir dist_universal
          lipo -create -output dist_universal/main dist_intel/main dist_arm/main

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-binary
          path: |
            dist/*
            dist_universal/*

  publish:
    name: Publish Binaries
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Install GitHub CLI
        uses: actions/gh-cli@v3

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in artifacts/*; do
            gh release upload ${{ steps.create_release.outputs.id }} "$file" --clobber
          done
